#!/bin/bash
# mer-sdk-chroot

# TODO
#
# Support a Mer clean setup (ie no .oscrc)
# Support multiple shells (ie split setup/entry)

usage()
{
    cat <<EOF
    usage: $0 [-u <user>] [-r <SDK root path>] [enter]
           $0 [-u <user>] [-r <SDK root path>] exec <command> <args> ..
           $0 [-u <user>] [-m <all|none|root|home>] [-r <SDK root path>]  mount 
           $0 [-r <SDK root path>] umount

       This is the Mer chroot SDK.
       For information see http://wiki.merproject.org/wiki/Platform_SDK

       The SDK has 4 commands:
          enter (default)
          exec
          mount
          umount

      enter
         Used to enter the SDK and begin working. The SDK bash shell is a
         login shell. See below for .profile handling
         Must be preceded by a 'mount' to setup the SDK.
         May be used in multiple terminals and simply enters the
         chroot

      exec
         Used to execute an arbitrary command from within the SDK chroot
         environment. The environment variable MERSDK is set to 1 to allow
         SDK detection.

      mount
         Used to setup the SDK mountpoints. Only needed once per login
         session

      umount
         Used to clean up the SDK mountpoints before removing the SDK.

      Options:

       -u  System user to link into SDK (not needed if using sudo)
       -m  Devices to bind mount from host: none, all (default)
           root, home
       -r The root of the SDK to use - normally derived from the
          pathname of $0

      Profile

      Entering the SDK runs the user's normal .profile and any (SDK)
      system profile entries. It will not execute the host's system
      profile entries.

      The environment variable MERSDK is set to 1 to allow .profile to
      detect the SDK.

      If the user has a ~/.mersdk.profile then it is sourced after the
      normal .profile handling (this allows the common use case of
      setting a profile to be handled).

      Hooks

      If the user specified has a .mersdkrc in their $HOME, it will be
      sourced to allow hook functions to be defined. Hooks are run as
      root. No commands should be executed immediately.

      These hooks are usually used to define symbolic links from any
      /parentroot/data type filesystems into the SDK root to setup
      system specific shared caches or filesystem layouts etc

EOF
    return 0
}

if [[ $EUID -ne 0 ]]; then
    exec sudo $0 "$@"
    echo "$0 must be run as root and sudo failed; exiting"
    exit 1
fi

# Use the SUDO value if present
user=$SUDO_USER || true;

bind_mount_root="yes";
bind_mount_home="yes";

# Support the action being given as the first non-option arg
if [ "${1:0:1}" != "-" ]; then
    action="$1"
    shift
fi

while getopts "u:m:r:" opt; do
    case $opt in
	u ) user=$OPTARG;;
	m )
	    case $OPTARG in
		all) ;;
		home)
		    bind_mount_root="no";;
		root)
		    bind_mount_home="no";;
		none)
		    bind_mount_root="no";
		    bind_mount_home="no";;
		*)  echo "Only 'none', 'all' or 'home' are permitted for -m"
		    usage
		    exit 1;;
	    esac ;;
	r ) sdkroot=$OPTARG;;
	\? ) usage
            exit 1;;
	: ) echo "Option -$OPTARG requires an argument." >&2
	    usage
	    exit 1;;
	* ) usage
            exit 1;;
    esac
done
shift $(($OPTIND - 1))

if [[ -z "${sdkroot}" ]] ; then
    sdkroot=$(dirname $(readlink -f $0))
else
    sdkroot=$(readlink -f $sdkroot)
fi

if [[ ! -f ${sdkroot}/etc/MerSDK ]] ; then
    echo "${sdkroot} does not look like a Mer SDK rootfs"
    echo "if you are sure it is, you may mark it by running"
    echo "echo 'MerSDK' | sudo tee ${sdkroot}/etc/MerSDK"
    exit 1
fi

# We need the SDK to be under a --make-unbindable mount otherwise it
# appears in other SDKs. We also need $sdkroot *not* to be
# --make-unbindable since things like mic want to make bind mounts in
# there.
# We can't just make .. --make-unbindable since it may be something
# special (eg if the SDK is installed straight into $HOME or / that
# would break stuff)
# Solution - force an intermediate 'sdks' directory for now. We could
# do this in the .ks for chroot SDKs but that gets messy too.
sdkparent=$(dirname $sdkroot)
if [[ $(basename $sdkparent) != "sdks" ]] ; then
    echo "The SDK must be installed into a directory called sdks"
    echo "maybe:"
    echo " mkdir $sdkparent/sdks/"
    echo " mv $sdkroot $sdkparent/sdks/"
    exit 1
fi

if [[ -z $user ]] ; then
    echo "$0 expects to be run as root using sudo"
    echo "User could not be obtained from \$SUDO_USER, if running as root,"
    echo "please use -u <user>"
    echo
    usage
    exit 1
fi

# From now on, exit if variables not set
set -u

# Make sure normal users can use any dirs we make
umask 022

################################################################
# Mount
prepare_mountpoints() {
    # Ensure the parent is a mountpoint in it's own right so it can be
    # made unbindable
    grep $sdkparent /proc/mounts > /dev/null || mount --bind $sdkparent/ $sdkparent/

    # Setup sdkroot as a bind mountpoint on itself to permit
    # --make-unbindable
    mount --make-private $sdkparent      # Permit bind mounts below parent so we can...
    mount --bind $sdkroot/ $sdkroot/     # ... set the SDK dir as a mountpoint.
    mount --make-unbindable $sdkparent   # Make the parent unbindable again
    mount --make-private $sdkroot        # but allow bindmounts within the SDK for mic etc


    echo "Mounting system directories..."
    mount --bind /proc ${sdkroot}/proc
    mount --bind /proc/sys/fs/binfmt_misc ${sdkroot}/proc/sys/fs/binfmt_misc
    mount --bind /sys ${sdkroot}/sys
    mount --bind /dev ${sdkroot}/dev
    mount --bind /dev/pts ${sdkroot}/dev/pts
    mount --bind /dev/shm/ ${sdkroot}/dev/shm/
    mount --bind /var/lib/dbus ${sdkroot}/var/lib/dbus
    mount --bind /var/run/dbus ${sdkroot}/var/run/dbus

    if [[ $bind_mount_root == "yes" ]] ; then
	echo "Mounting / as /parentroot"
	mkdir -p ${sdkroot}/parentroot
	mount --rbind / ${sdkroot}/parentroot/
    fi

    mkdir -p ${sdkroot}/lib/modules/`uname -r`
    mount --bind /lib/modules/`uname -r` ${sdkroot}/lib/modules/`uname -r`

}

prepare_user() {
    # remove mer user if present
    sed -i -e "/^mer:/d" ${sdkroot}/etc/passwd
    # getent is probably best for user data
    sed -i -e "/^${user}:/d" ${sdkroot}/etc/passwd
    getent passwd $user >> ${sdkroot}/etc/passwd
    group=$(getent passwd $user | cut -f4 -d:)
    sed -i -e "/^[^:]*:[^:]*:${group}:/d" ${sdkroot}/etc/group
    getent group $group >> ${sdkroot}/etc/group
    HOMEDIR=$(getent passwd $user | cut -f6 -d:)

    if [[ $bind_mount_home == "yes" ]] ; then
	echo "Mounting home directory: ${HOMEDIR}"
	mkdir -p ${sdkroot}${HOMEDIR}
	mount --bind ${HOMEDIR} ${sdkroot}${HOMEDIR}
	mount --make-unbindable ${sdkroot}${HOMEDIR}
    fi
    echo "$user ALL=NOPASSWD: ALL" > ${sdkroot}/etc/sudoers.d/$user
    chmod 0440 ${sdkroot}/etc/sudoers.d/$user
}

prepare_etc() {
    # Symlink to parentroot to support dynamic resolv.conf on host
    rm -f ${sdkroot}/etc/resolv.conf
    resolv=$(readlink -fn /etc/resolv.conf) # some systems use symlinks to /var/run/...
    ln -s /parentroot/$resolv ${sdkroot}/etc/resolv.conf

    # Fixup old SDKs with broken /etc/mtab since this won't be fixed
    # by any package updates
    if [[ ! -L ${sdkroot}/etc/mtab ]]; then
	echo "The /etc/mtab file in the SDK is not a symbolic link - forcing it to link to /proc/self/mounts to fix https://bugs.merproject.org/show_bug.cgi?id=385"
	rm -f ${sdkroot}/etc/mtab
	ln -s /proc/self/mounts ${sdkroot}/etc/mtab
    fi

}

################################################################
# Umount

err_cleanup() {
    echo
    echo 'Something went wrong during cleanup.'
    echo 'Retrying umounts but manual check is required'
    echo '- press return to confirm'
    echo
    read dummy
    # Now retry cleanup
    set +e
    cleanup
}

umounterrs=""
warn_umount(){
    echo
    echo "Error executing umount of $mountpoint"
    umounterrs="$umounterrs\n$mountpoint"
}

try_umount() {
    mountpoint=$1
    shift
    trap "warn_umount" ERR
    umount "$@" $mountpoint
    trap - ERR
}

cleanup () {
    # We need to detect all mountpoints inside our chroot.
    mountpoints_r=$(perl -w -ne "print \"\$1\n\" if m\"^\S* ${sdkroot}(/\S*) \";" /proc/mounts | sort -r)

    echo "Unmounting all directories... ($(echo \"${mountpoints_r}\" | wc -w) found)"

    # umount in reverse order
    for mp in ${mountpoints_r}; do
	try_umount ${sdkroot}$mp/
    done

    # umount the self-bind mount we use to apply the --make-unbindable
    # When this script is run in umount mode the shell has a
    # filehandle open into the self-mount for it - this results in a
    # device busy and hence needs a lazy umount
    try_umount ${sdkroot}/ -l

    # Report any errors found
    if [[ $umounterrs ]]; then
	echo
	echo "Errors encountered when unmounting the following mountpoints"
	echo -e $umounterrs
    fi
}

################################################################
# utility
ensure_mounted() {
    [[ -e ${sdkroot}/.sdkoptions ]] || {
	cat <<EOF
This SDK ( ${sdkroot} ) does not appear to be mounted.
Have you run $0 mount?

(Check /proc/self/mounts to be sure.)
EOF
	exit 1;
    }
}
ensure_not_mounted() {
    [[ -e ${sdkroot}/.sdkoptions ]] && {
	cat <<EOF
This SDK ( ${sdkroot} ) is already mounted.
If you are sure this is not an error and /proc/self/mounts has no mountpoints under it then remove ${sdkroot}/.sdkoptions and try again.
EOF
	exit 1;
    }

}
stash_mount_options() {
    cat <<EOF > ${sdkroot}/.sdkoptions
user="${user}"
HOMEDIR="${HOMEDIR}"
EOF
}
get_mount_options() {
    [[ -e ${sdkroot}/.sdkoptions ]] && {
	source ${sdkroot}/.sdkoptions
    }
}

################

setup_user_hooks(){
    # Access any user hooks
    [[ -e $HOMEDIR/.mersdkrc ]] && . $HOMEDIR/.mersdkrc
}

run_user_hook() {
    hook=$1
    [[ $(type -t $hook) == "function" ]] && {
	echo "User hook $hook"
	$hook
    }
}
################

add_pid_to_active_chroot_list() {
    mkdir -p $sdkroot/.active_chroots/
    touch $sdkroot/.active_chroots/$$
}
rm_pid_from_active_chroot_list() {
    rm $sdkroot/.active_chroots/$$
}
ensure_active_chroot_list_is_empty() {
    mkdir -p $sdkroot/.active_chroots/
    pids=$(ls $sdkroot/.active_chroots/)
    stillused=""
    [[ -z "$pids" ]] || {
	for pid in $pids; do
	    if [[ -d /proc/$pid ]] && [[ `ls -l /proc/${pid}/fd | grep -w "${sdkroot}"` ]] ; then
		stillused="$stillused $pid"
	    else
		rm $sdkroot/.active_chroots/$pid
	    fi
	done
	[[ -z "$stillused" ]] || {
	    echo "There appears to be $(wc -w <<< $stillused) chroot(s) still using this SDK"
	    echo "Process(es) $stillused    are still in use, exiting without unmounting..."
	    exit 1;
	}
    }
}

################################################################

action=${action:-enter}
retval=0

case "$action" in
    enter | exec )
        # setarch is used so uname -a will report i386 - this allows
        # osc to work
	ensure_mounted
	get_mount_options
	setup_user_hooks
	run_user_hook enter_sdk
	add_pid_to_active_chroot_list
	case "$action" in
	    enter )
		echo "Entering chroot as $user"
		setarch i386 chroot ${sdkroot} /bin/su -s /bin/bash -l $user -- -c "exec bash --init-file /mer-bash-setup -i"
		;;
	    exec )
		if [[ ! $1 ]]; then
		    echo "You must supply a command to exec"
		    usage
		    retval=1
		else
		    setarch i386 chroot "${sdkroot}" /bin/su -s /bin/bash -l $user -- -c "export MERSDK=1; $*"
		    retval=$?
		fi
		;;
	esac
	rm_pid_from_active_chroot_list
	run_user_hook leave_sdk
	;;

    mount )
	ensure_not_mounted
	trap "err_cleanup; exit" INT TERM EXIT
        prepare_mountpoints   # host / and data and /proc and similar
	prepare_user          # in /etc/passwd
	setup_user_hooks      # (after prepare so HOMEDIR is known)
	prepare_etc           # resolv.conf and ssl certs
	run_user_hook mount_sdk
	stash_mount_options   # for use when umounting

	cat <<EOF
${sdkroot} is now setup with mountpoints to make it easier to use as a Mer SDK.
EOF
	trap - INT TERM EXIT
	;;

    umount|unmount )
	ensure_mounted
	ensure_active_chroot_list_is_empty
	get_mount_options
	rm ${sdkroot}/.sdkoptions
	setup_user_hooks
	trap "err_cleanup; exit" INT TERM EXIT
        # Call cleanup manually - if an error occurs then warn and
        # retry
	run_user_hook umount_sdk
	cleanup
	trap - INT TERM EXIT
	;;
    * )
	echo "$action not recognised"
	;;
esac

exit $retval
