#!/usr/bin/python
import sys
import lxml.etree as et
import argparse
import os
import subprocess

def assert_valid_sb2_name(name):
    if not os.path.isdir(os.path.expanduser("~/.scratchbox2/%s" % name)):
        raise Exception("%s is not a valid scratchbox2 target name" % name)

def sb2_command(sb2, *args):
    data = subprocess.check_output(["sb2", "-t", sb2] + list(args))
    if data:
        return data.strip()
    raise Exception("'%s' returned no data" % " ".join(args))

def get_xml(args):
    # http://lxml.de/FAQ.html#why-doesn-t-the-pretty-print-option-reformat-my-xml-output
    parser = et.XMLParser(remove_blank_text=True)
    try:
        tree = et.parse(args.target_xml, parser)
    except :
        print "Error loading %s, used new blank xml" % args.target_xml
        with open(args.target_xml, "w") as f:
                f.write("""<targets version="2">
</targets>
""")
        tree = et.parse(args.target_xml, parser)

    root = tree.getroot()

    if root.tag != "targets":
        raise Exception("xml must have <targets> as root element")
    if int(root.get("version")) != 2:
        raise Exception("Only version 2 of MerTarget XML is supported")

    return root


def update(args, root):
    # Make sure the name is valid
    assert_valid_sb2_name(args.name)

    # Create a brand new node so we don't leave any junk behind
    new = et.Element("target", name=args.name)

    # See if there is a target using this name already
    existing =  root.find(".//target[@name='%s']" % args.name)

    if et.iselement(existing):
        # replace existing node with new node
        root[root.index(existing)] = new
    else:
        root.append(new)

    # Now build the target info
    et.SubElement(new, "output", name="GccDumpMachine"
                  ).text = sb2_command(args.name, "gcc", "-dumpmachine")
    et.SubElement(new, "output", name="QmakeQuery"
                  ).text = sb2_command(args.name, "qmake", "-query")

def delete(args, root):
    existing = root.find(".//target[@name='%s']" % args.name)
    del root[root.index(existing)]

def save(args,root):
    # Save XML
    with open(args.target_xml, 'w') as f:
        f.write(et.tostring(root, pretty_print=True))


parser = argparse.ArgumentParser(description='Updates QtCreator Target XML file with a new Mer Target')

parser.add_argument('--name', required=True,
                    help="Name of SDK Target to add/update (sb2 name)")
parser.add_argument('--delete', action='store_true',
                    help="Delete named SDK Target from xml")
parser.add_argument('--target-xml', required=True,
                    help="The QtCreator Targets xml file")

args = parser.parse_args()

root = get_xml(args)

if args.delete:
    delete(args, root)
else:
    update(args, root)

save(args, root)
