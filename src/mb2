#!/bin/bash
#
# Copyright (C) 2013 - 2014 Jolla Ltd.
# Contact: David Greaves <david.greaves@jollamobile.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

short_usage() {
    cat <<EOF
usage: $ME [-t <target>] [-s <specfile>] [-d <device>] [-p <projectdir>]
           [-f <folder>] [-i] [-P]
           build [-d] [-j <n>] [<args>] | qmake [<args>] | make [<args>] | ssh <args>
           install [<args>] | rpm [<args>] | deploy <args> | run <args>
       $ME --help
EOF
    # exit if any argument is given
    [[ -n "$1" ]] && exit 1
}

usage() {
    short_usage
    cat <<EOF

  Executes a subset of build commands in the context of an rpmbuild.
  Typically called from QtCreator to perform qmake/make phases of a project.
  Note that any other build steps in the .spec file will also be run.

  <specfile> will be looked for in the current rpm/ dir. If there is
  more than one it must be provided.

  CWD is used as a base dir for installroot/ and RPMS/ to allow for
  shadowbuilds

  $ME is aware of spectacle and will update the spec file if there is
  an obvious yaml file which is newer.

  $ME build [-d] [-j <n>] [<args>]
                     : runs rpmbuild for the given spec file in the
                       given sb2 target. Produces an rpm package.
                     : -d     enable debug build
                     : -j <n> use only 'n' CPUs to build
                     : can use -s -t -p -i

  $ME qmake [<args>] : runs qmake in the 'build' phase
                       Note that this also verifies target
                       build dependencies are up to date
                     : can use -s -t -p  

  $ME make [<args>]  : run make in the 'build' phase
                     : can use -s -t -p

  $ME deploy --zypper|--pkcon|--rsync
                     : runs the install or rpm-creation phase and then
                       copies/installs the relevant files to the device
                     : can use -s -t -p -d -i -f

  $ME run|ssh [<args>] : runs a command (on device if --device given);
                         intended for running gdb and a gdb server
                     : can use -s -t -p -d

  $ME install [<args>] : runs the 'install' phase to install to $buildroot
                     : can use -s -t -p

  $ME installdeps [<xargs>] : refreshes the zypper cache of the target and
                              if required installs build-dependencies
                            : can use -s -t

  $ME rpm [<args>]   : runs the install & rpm-creation phases
                     : can use -s -t -p -i

  -i | --increment     : increment release number in spec file
  -t | --target        : specify the sb2 target to use
  -d | --device        : specify the device
  -p | --projectdir    : when running shadow build/deploy from another dir
  -s | --specfile      : if the specfile is not in rpm/*.spec and cannot be found using -p
  -f | --shared-folder : the folder where QtCreator shares devices.xml and ssh keys
                         this option is useful if deploy option is used outside of virtual
                         machine
  -P | --pedantic      : do extra checks

EOF
}

notice() {
    echo "NOTICE: $*"
}

fatal() {
    echo "Fatal: $*"
    exit 1
}

check_spec_supports_qtc() {
    if ! grep "define qtc_qmake" "$OPT_SPEC" >/dev/null 2>&1 ; then
	notice "This specfile does not have the qtc_* macros defined"
    fi
}

try_to_make_spec() { # Tries to create a missing spec
    [[ -f "$1" ]] && return # It's not missing
    local yaml="${1%.spec}.yaml"
    [[ -f "$yaml" ]] || return # No yaml
    ANSI_COLORS_DISABLED=1 specify -n -N "$yaml" || fatal "unable to convert yaml to spec"
}

try_to_make_spec_from_yaml() {
    # Tries to create a missing spec from a given yaml
    try_to_make_spec "${1%.yaml}.spec"
}

ensure_spec_newer_than_yaml() {
    local yaml="${OPT_SPEC%.spec}.yaml"
    if [[ -f "$yaml" ]] && [[ "$yaml" -nt "$OPT_SPEC" ]]; then # -nt is newer than
	ANSI_COLORS_DISABLED=1 specify -n -N "$yaml" || fatal "unable to convert yaml to spec"
    fi

    # it's ok also not to have a yaml
}

verify_target_dependencies() {
    rpmspec --query --buildrequires "$OPT_SPEC" | \
        xargs --no-run-if-empty sb2 -t "$OPT_TARGET" -m sdk-install -R zypper --quiet --non-interactive in
}

get_spec_tag() {
    rpmspec --query --srpm --queryformat="$1" "$OPT_SPEC"
}

# Helper to read XML
read_dom () {
    local IFS=\>
    read -d \< ENTITY CONTENT
    local RET=$?
    TAG_NAME=${ENTITY%% *}
    ATTRIBUTES=${ENTITY#* }
    return $RET
}

# This slurps the XML and converts tags like <subnet> to $device_subnet
# Also sets device_name and device_type from the attributes
get_device() {
    local FOUND_DEVICE=
    local IN_DEVICE=
    local maintag=
    while read_dom; do
	case $TAG_NAME in
	    device )
		maintag=$TAG_NAME
		eval local $ATTRIBUTES
		if [[ "$name" == "$1" ]] ; then
		    FOUND_DEVICE=1
		    IN_DEVICE=1
		    device_name="$name"
		    device_type="$type"
		else
		    IN_DEVICE=
		fi
		;;
	    engine )
		maintag=$TAG_NAME
		eval local $ATTRIBUTES
		;;
	    mac|index|subnet|ip|sshkeypath )
		# Don't process and store nested tags if we're in
		# device with wrong name
		if [[ "$maintag" == "device" ]] && [[ $IN_DEVICE != 1 ]]; then
		    continue
		fi
		eval ${maintag}_$TAG_NAME=\"$CONTENT\"
		;;
	esac
    done
    # Set this up as it's useful
    if [[ "$device_subnet" ]]; then
	device_ip="$device_subnet".$device_index
    fi
    if [[ "$FOUND_DEVICE" == 1 ]]; then return 0; else return 1; fi
}

rsync_as() {
    local user="$1";shift
    local key=$(get_shared_dir)/${device_sshkeypath}/$user
    [[ -f "$key" ]] || fatal "No key for user $user on $device_name given in devices.xml (rsync $key)"
    RSYNC_RSH="ssh -F /etc/ssh/ssh_config.sdk -l $user -i \"$key\"" rsync "$@"
}

ssh_as() {
    local user="$1";shift
    local key=$(get_shared_dir)/${device_sshkeypath}/$user
    [[ -f "$key" ]] || fatal "No key for user $user on $device_name given in devices.xml ($key)"
    ssh -F /etc/ssh/ssh_config.sdk -i "$key" -l $user $device_ip "$@"
}

run_installdeps() {
    # Refresh repos before installing dependencies
    sb2 -t "$target" -m sdk-install -R zypper --non-interactive ref
    verify_target_dependencies
}

cd_to_spec_setup_dir() {
    _basedir="$PWD"

    # avoid spawning another process for | cut -s -f2 -d '/'
    local setup_dir=$(grep -Po '%setup.*-n.*' "$OPT_SPEC")
    # if setup_dir has '/' return the part after it
    setup_dir=${setup_dir/#*\//}
    # if it did not have a '/' then we got the original match => erase it
    setup_dir=${setup_dir/#%setup*/}

    if [[ -n "$setup_dir" ]]; then
	# in case we got a spec %{tag} out of this, try to expand it
	setup_dir=$(get_spec_tag "$setup_dir")
	cd "$setup_dir"
    fi
}

# handle release tags with format "x" or "x.y", where x and y are
# numbers, leave others untouched
#  get tag
#  check if it has x.y
#  if it is x.y get y and check if y is number
#  if y is number => increment
#  if it only is x check if x is number
#  if x is number => increment
#  else leave untouched
increment_build_number() {
    [[ $OPT_INC_BUILD_NUMBER -eq 0 ]] && return

    local release=$(get_spec_tag "%{release}")
    local x=$(echo $release | cut -f 1 -d .)
    local y=$(echo $release | cut -s -f 2 -d .)
    local z=$(echo $release | cut -s -f 3- -d .)

    # more than one dot found => don't touch
    [[ -n "$z" ]] && return

    if [[ -n "$y" ]]; then
	if [[ $y =~ ^-?[0-9]+$ ]]; then
	    let new_release=$y+1
	    echo "Incrementing release: $x.$y -> $x.$new_release"
	    sed -i "s/^Release:.*/Release: $x.$new_release/" "$OPT_SPEC"
	    return
	else
	    # non-numeric after dot => don't touch
	    return
	fi
    fi

    if [[ -n "$x" ]]; then
	if [[ $x =~ ^-?[0-9]+$ ]]; then
	    let new_release=$x+1
	    echo "Incrementing release: $x -> $new_release"
	    sed -i "s/^Release:.*/Release: $new_release/" "$OPT_SPEC"
	    return
	fi
    fi
}

# quote possible whitespace arguments
fix_arguments() {
    local orig_args=("$@")
    local num_oargs=${#orig_args[@]}

    for ((i=0; i<$num_oargs; i++)); do
	local tmp_arg=$(printf "'%s' " "${orig_args[${i}]}")
	fixed_args="$fixed_args $tmp_arg"
    done
}

run_build() {
    # intended to provide mb build behaviour
    verify_target_dependencies

    sed -e '/^%patch/d' "$OPT_SPEC" > "$OPT_SPEC".$$
    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}
    increment_build_number;
    (
	cd_to_spec_setup_dir;
	rm -f "$_basedir/RPMS/*.rpm";
	eval sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
	    $BUILD_DEBUG \
	    --define \"_smp_mflags -j$BUILD_JOBS\" \
	    --define \"_rpmdir $_basedir/RPMS \" \
	    --define \"_sourcedir $_basedir/rpm \" \
	    --define \"_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm \" \
	    --buildroot=\"$buildroot\" \
	    --dobuild \
	    --doinstall \
	    --dobinary \
	    --docheck \
	    \"$OPT_SPEC\".$$
    )
    rm -f "$OPT_SPEC".$$
}

run_qmake() {
    if [[ "$OPT_SPEC" ]]; then
	local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
	build_tgt=${build_tgt%-gnueabi}

	# The paths that are passed to rpmbuild via the --define
	# options can contain whitespace so let's quote all args
	fix_arguments "$@"

	# This is a good time to verify the target dependencies as per mb
	verify_target_dependencies
	(
	    cd_to_spec_setup_dir;
	    eval sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
		--dobuild \
		--define \"noecho 1 \" \
		--define \"qtc_builddir $_basedir \" \
		--define \"qtc_make true ignoring make\" \
		--define \"qtc_qmake5 %qmake5 $fixed_args\" \
		--define \"qtc_qmake %qmake $fixed_args\" \
		\"$OPT_SPEC\"
	)
    else
	sb2 -t $OPT_TARGET qmake "$@"
    fi
}

run_make() {
    if [[ "$OPT_SPEC" ]]; then
	local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
	build_tgt=${build_tgt%-gnueabi}
	(
	    cd_to_spec_setup_dir;
	    eval sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
		--dobuild \
		--define \"noecho 1 \" \
		--define \"qtc_builddir $_basedir \" \
		--define \"qtc_qmake5 true ignoring qmake\" \
		--define \"qtc_qmake true ignoring qmake\" \
		--define \"qtc_make make %{?_smp_mflags} "$@"\" \
		\"$OPT_SPEC\"
	)
    else
	sb2 -t $OPT_TARGET make "$@"
    fi
}

run_install() {
    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}

    # Install to buildroot which should be rsync'ed to /opt/sdk/$package on device
    (
	cd_to_spec_setup_dir;
	eval sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
	    --define \"noecho 1 \" \
	    --define \"qtc_builddir $_basedir \" \
	    --define \"_sourcedir $_basedir/rpm \" \
	    --buildroot=\"$buildroot\" \
	    --doinstall \
	    \"$OPT_SPEC\"
    )
}

run_rpm() {
    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}
    (
	cd_to_spec_setup_dir;
	rm -f "$_basedir/RPMS/*.rpm";
	increment_build_number;
	eval sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
	    --define \"noecho 1 \" \
	    --define \"qtc_builddir $_basedir \" \
	    --define \"_rpmdir $_basedir/RPMS \" \
	    --define \"_sourcedir $_basedir/rpm \" \
	    --define \"_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm \" \
	    --buildroot=\"$buildroot\" \
	    --doinstall \
	    --dobinary \
	    \"$OPT_SPEC\"
    )
}

run_deploy() {
    [[ "$device_type" ]] || fatal "deploy must have a valid --device"
    local fail_text="deploy must use one of --pkcon, --rsync or --zypper"
    [[ -z ${1:-} ]] && fatal $fail_text

    local retcode=0

    while [[ $1 ]]; do
	case "$1" in
	    "--pkcon" ) shift
		run_rpm
		[[ $? -ne 0 ]] && return 1
		rpms=$(find RPMS -name '*.rpm' -a ! -name '*-debug*.rpm')
		rsync_as $deviceuser -av ${rpms} $device_ip:/home/$deviceuser/RPMS/
		[[ $? -ne 0 ]] && return 1
		ssh_as $deviceuser pkcon --plain --noninteractive install-local ${rpms}
		retcode=$?
		ssh_as $deviceuser rm -f ${rpms}
		;;
            "--zypper" ) shift
		run_rpm
		[[ $? -ne 0 ]] && return 1
		rpms=$(find RPMS -name '*.rpm' -a ! -name '*-debug*.rpm')
		rsync_as root -av ${rpms} $device_ip:/root/RPMS/
		[[ $? -ne 0 ]] && return 1
		ssh_as root zypper --non-interactive --quiet in -f ${rpms}
		retcode=$?
		ssh_as root rm -f ${rpms}
		;;
            "--rsync" ) shift
		run_install
		[[ $? -ne 0 ]] && return 1
		name=$(get_spec_tag "%{name}")
		rsync_as $deviceuser -av ${buildroot}/. $device_ip:/opt/sdk/$name
		retcode=$?
		;;
	    *)
		fatal $fail_text ;;
	esac
    done

    [[ $retcode -eq 0 ]] || { echo "Deploy failed"; return 1; }
}

get_shared_dir() {
    echo "$OPT_SHARED_DIR"
}

# this is same as basename $0
ME=${0/#*\//}

# option variables
OPT_SPEC=
OPT_TARGET=
OPT_DEVICE=
OPT_PKGDIR="./rpm"
OPT_PROJDIR=
OPT_NEEDSPEC=
OPT_PEDANTIC=0
OPT_SHARED_DIR=/etc/mersdk/share
OPT_INC_BUILD_NUMBER=0
deviceuser=nemo

# Virtualbox environment will install in this hardcoded location
if [[ -f /etc/mer-sdk-vbox ]]; then
    buildroot=/home/deploy/installroot
else
    buildroot="$PWD/installroot"
fi

while [[ "$1" ]]; do
    # only set variables in this loop
    case "$1" in
        "-t" | "--target") shift
	    OPT_TARGET="$1"; shift
	    ;;
	"-f" | "--shared-folder") shift
	    OPT_SHARED_DIR="$1"; shift
	    ;;
        "-d" | "--device") shift
	    OPT_DEVICE="$1"; shift
	    ;;
        "-p" | "--projectdir") shift
	    OPT_PROJDIR="$1"; shift
	    OPT_PKGDIR="$OPT_PROJDIR"/rpm
	    [[ -d "$OPT_PROJDIR" ]] || fatal "'$OPT_PROJDIR' is not a directory"
	    ;;
        "-s" | "--specfile" ) shift
	    OPT_SPEC="$1"; shift
	    ;;
	"-i" | "--increment" ) shift
	    OPT_INC_BUILD_NUMBER=1
	    ;;
	"-P" | "--pedantic" ) shift
	    OPT_PEDANTIC=1
	    ;;
	install | rpm | deploy | build | installdeps )
	    OPT_NEEDSPEC=1;
	    break 2 ;;
	qmake | make | run | ssh )
	    break 2 ;;
	*)
	    usage
	    exit 1
            ;;
    esac
done

if [[ -n "$OPT_SPEC" ]]; then
    try_to_make_spec "$OPT_SPEC"
    [[ -f "$OPT_SPEC" ]] || fatal "'$OPT_SPEC' doesn't exist (and could not be made from a yaml)"
fi

if [[ -n "$OPT_DEVICE" ]]; then
    [[ -f $(get_shared_dir)/devices.xml ]] || fatal "Unable to open $(get_shared_dir)/devices.xml"
    get_device "$OPT_DEVICE" < $(get_shared_dir)/devices.xml || fatal "'$OPT_DEVICE' not found in devices.xml"
fi

if [[ ! "$OPT_TARGET" ]]; then
    if [[ -f ~/.scratchbox2/config ]]; then
	. ~/.scratchbox2/config
	OPT_TARGET=$DEFAULT_TARGET
    fi
    [[ "$OPT_TARGET" ]] || fatal "You must specify an sb2 target or have a default configured"
fi

[[ -d ~/.scratchbox2/$OPT_TARGET ]] || fatal "$OPT_TARGET is an invalid sb2 target"

# spec rules are complex:
#  a .spec is required for some but not all operations
#  if -s is given then
#    if it does not exist then specify tries to make it
#    if it exists it will be used
#  if there is a rpm/*.spec then that is used
#  if there is a rpm/*.yaml then a spec is made and used

if [[ ! "$OPT_SPEC" ]]; then
    # set nullglob on so that the shell glob expansions will return
    # empty if files are not found
    shopt -s nullglob
    spec_files=("$OPT_PKGDIR"/*.spec)
    numspec=${#spec_files[@]}
    if [[ $numspec -gt 1 ]]; then
	[[ $OPT_NEEDSPEC ]] && fatal "Too many spec files - please use -s to identify which one to use"
	echo "Too many spec files - not using any. Use -s to identify a specific one"
	# OPT_SPEC is not set
    fi

    if [[ $numspec -eq 0 ]]; then
	# No spec, try to find a yaml
	yaml_files=("$OPT_PKGDIR"/*.yaml)
	numyaml=${#yaml_files[@]}
	if [[ $numyaml -eq 1 ]]; then
	    theyaml=("$OPT_PKGDIR"/*.yaml)
	    try_to_make_spec_from_yaml "${theyaml[0]}"
	    spec_files=("$OPT_PKGDIR"/*.spec)
	    numspec=${#spec_files[@]}
	else
	    [[ $OPT_NEEDSPEC ]] && fatal "No spec file found in '$OPT_PKGDIR/' and couldn't make one from a yaml #1"
	fi
    fi

    if [[ $numspec -eq 1 ]]; then
	thespec=("$OPT_PKGDIR"/*.spec)
	OPT_SPEC="${thespec[0]}"
    else
	# this is because we did try_to_make_spec_from_yaml and failed
	[[ $OPT_NEEDSPEC ]] && fatal "No spec file found in '$OPT_PKGDIR/' and couldn't make one from a yaml #2"
    fi

    # unset nullglob so that any further globbing works normally
    shopt -u nullglob
fi

# Now if there is a spec given, make sure it is up-to-date
if [[ "$OPT_SPEC" ]]; then
    # turn 'OPT_SPEC' into an absolute path
    OPT_SPEC=$(readlink -f "$OPT_SPEC")
    ensure_spec_newer_than_yaml
fi

case "$1" in
    qmake | make | install | rpm | deploy )
	cmd=run_$1
	if [[ "$OPT_PEDANTIC" -eq 1 && "$OPT_SPEC" ]]; then
	    check_spec_supports_qtc
	fi
        shift
        ;;
    build | installdeps )
	cmd=run_$1; shift
	BUILD_DEBUG='--define "debug_package %{nil} "'
	BUILD_JOBS=
	while [[ "$1" ]]; do
	    case "$1" in
		-d|--enable-debug) shift
		    BUILD_DEBUG= ;;
		-j*)
		    # support giving -j with and without space between
		    # it and the 'n'
		    if [[ ${#1} -gt 2 ]]; then
			BUILD_JOBS=${1:2}; shift
		    else
			[[ -z "$2" ]] && short_usage quit
			BUILD_JOBS="$2"; shift 2;
		    fi
		    ;;
		*)
		    break
		    ;;
	    esac
	done
	[[ $BUILD_JOBS ]] || BUILD_JOBS=$(getconf _NPROCESSORS_ONLN)
        ;;
    run | ssh ) shift
	if [[ "$OPT_DEVICE" ]]; then
	    cmd="ssh_as $deviceuser"
	else
	    cmd="eval"
	fi
        ;;
    *)
	short_usage quit
	;;
esac

$cmd "$@"
